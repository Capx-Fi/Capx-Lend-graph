// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class NFT extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("tokenId", Value.fromBigInt(BigInt.zero()));
    this.set("owner", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NFT entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NFT must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("NFT", id.toString(), this);
    }
  }

  static load(id: string): NFT | null {
    return changetype<NFT | null>(store.get("NFT", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }
}

export class Loan extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("loanID", Value.fromBigInt(BigInt.zero()));
    this.set("wvtAddress", Value.fromBytes(Bytes.empty()));
    this.set("wvtDecimal", Value.fromBigInt(BigInt.zero()));
    this.set("wvtAmount", Value.fromBigInt(BigInt.zero()));
    this.set("wvtTicker", Value.fromString(""));
    this.set("stableCoinAddress", Value.fromBytes(Bytes.empty()));
    this.set("stableCoinDecimal", Value.fromBigInt(BigInt.zero()));
    this.set("stableCoinAmount", Value.fromBigInt(BigInt.zero()));
    this.set("stableCoinTicker", Value.fromString(""));
    this.set("loanToValue", Value.fromBigInt(BigInt.zero()));
    this.set("discount", Value.fromBigInt(BigInt.zero()));
    this.set("liquidationThreshold", Value.fromBigInt(BigInt.zero()));
    this.set("endTime", Value.fromBigInt(BigInt.zero()));
    this.set("initiationTime", Value.fromBigInt(BigInt.zero()));
    this.set("externalLiquidation", Value.fromBoolean(false));
    this.set("stageOfLoan", Value.fromBigInt(BigInt.zero()));
    this.set("borrowerAddress", Value.fromBytes(Bytes.empty()));
    this.set("lenderAddress", Value.fromBytes(Bytes.empty()));
    this.set("interestRate", Value.fromBigInt(BigInt.zero()));
    this.set("description", Value.fromString(""));
    this.set("liquidationIntoContractAmt", Value.fromBigInt(BigInt.zero()));
    this.set(
      "liquidationFromContractToLenderAmt",
      Value.fromBigInt(BigInt.zero())
    );
    this.set("liquidator", Value.fromBytes(Bytes.empty()));
    this.set("completedAtTime", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Loan entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Loan must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Loan", id.toString(), this);
    }
  }

  static load(id: string): Loan | null {
    return changetype<Loan | null>(store.get("Loan", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get loanID(): BigInt {
    let value = this.get("loanID");
    return value!.toBigInt();
  }

  set loanID(value: BigInt) {
    this.set("loanID", Value.fromBigInt(value));
  }

  get wvtAddress(): Bytes {
    let value = this.get("wvtAddress");
    return value!.toBytes();
  }

  set wvtAddress(value: Bytes) {
    this.set("wvtAddress", Value.fromBytes(value));
  }

  get wvtDecimal(): BigInt {
    let value = this.get("wvtDecimal");
    return value!.toBigInt();
  }

  set wvtDecimal(value: BigInt) {
    this.set("wvtDecimal", Value.fromBigInt(value));
  }

  get wvtAmount(): BigInt {
    let value = this.get("wvtAmount");
    return value!.toBigInt();
  }

  set wvtAmount(value: BigInt) {
    this.set("wvtAmount", Value.fromBigInt(value));
  }

  get wvtTicker(): string {
    let value = this.get("wvtTicker");
    return value!.toString();
  }

  set wvtTicker(value: string) {
    this.set("wvtTicker", Value.fromString(value));
  }

  get stableCoinAddress(): Bytes {
    let value = this.get("stableCoinAddress");
    return value!.toBytes();
  }

  set stableCoinAddress(value: Bytes) {
    this.set("stableCoinAddress", Value.fromBytes(value));
  }

  get stableCoinDecimal(): BigInt {
    let value = this.get("stableCoinDecimal");
    return value!.toBigInt();
  }

  set stableCoinDecimal(value: BigInt) {
    this.set("stableCoinDecimal", Value.fromBigInt(value));
  }

  get stableCoinAmount(): BigInt {
    let value = this.get("stableCoinAmount");
    return value!.toBigInt();
  }

  set stableCoinAmount(value: BigInt) {
    this.set("stableCoinAmount", Value.fromBigInt(value));
  }

  get stableCoinTicker(): string {
    let value = this.get("stableCoinTicker");
    return value!.toString();
  }

  set stableCoinTicker(value: string) {
    this.set("stableCoinTicker", Value.fromString(value));
  }

  get loanToValue(): BigInt {
    let value = this.get("loanToValue");
    return value!.toBigInt();
  }

  set loanToValue(value: BigInt) {
    this.set("loanToValue", Value.fromBigInt(value));
  }

  get discount(): BigInt {
    let value = this.get("discount");
    return value!.toBigInt();
  }

  set discount(value: BigInt) {
    this.set("discount", Value.fromBigInt(value));
  }

  get liquidationThreshold(): BigInt {
    let value = this.get("liquidationThreshold");
    return value!.toBigInt();
  }

  set liquidationThreshold(value: BigInt) {
    this.set("liquidationThreshold", Value.fromBigInt(value));
  }

  get endTime(): BigInt {
    let value = this.get("endTime");
    return value!.toBigInt();
  }

  set endTime(value: BigInt) {
    this.set("endTime", Value.fromBigInt(value));
  }

  get initiationTime(): BigInt {
    let value = this.get("initiationTime");
    return value!.toBigInt();
  }

  set initiationTime(value: BigInt) {
    this.set("initiationTime", Value.fromBigInt(value));
  }

  get externalLiquidation(): boolean {
    let value = this.get("externalLiquidation");
    return value!.toBoolean();
  }

  set externalLiquidation(value: boolean) {
    this.set("externalLiquidation", Value.fromBoolean(value));
  }

  get stageOfLoan(): BigInt {
    let value = this.get("stageOfLoan");
    return value!.toBigInt();
  }

  set stageOfLoan(value: BigInt) {
    this.set("stageOfLoan", Value.fromBigInt(value));
  }

  get borrowerAddress(): Bytes {
    let value = this.get("borrowerAddress");
    return value!.toBytes();
  }

  set borrowerAddress(value: Bytes) {
    this.set("borrowerAddress", Value.fromBytes(value));
  }

  get lenderAddress(): Bytes {
    let value = this.get("lenderAddress");
    return value!.toBytes();
  }

  set lenderAddress(value: Bytes) {
    this.set("lenderAddress", Value.fromBytes(value));
  }

  get interestRate(): BigInt {
    let value = this.get("interestRate");
    return value!.toBigInt();
  }

  set interestRate(value: BigInt) {
    this.set("interestRate", Value.fromBigInt(value));
  }

  get description(): string {
    let value = this.get("description");
    return value!.toString();
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get liquidationIntoContractAmt(): BigInt {
    let value = this.get("liquidationIntoContractAmt");
    return value!.toBigInt();
  }

  set liquidationIntoContractAmt(value: BigInt) {
    this.set("liquidationIntoContractAmt", Value.fromBigInt(value));
  }

  get liquidationFromContractToLenderAmt(): BigInt {
    let value = this.get("liquidationFromContractToLenderAmt");
    return value!.toBigInt();
  }

  set liquidationFromContractToLenderAmt(value: BigInt) {
    this.set("liquidationFromContractToLenderAmt", Value.fromBigInt(value));
  }

  get liquidator(): Bytes {
    let value = this.get("liquidator");
    return value!.toBytes();
  }

  set liquidator(value: Bytes) {
    this.set("liquidator", Value.fromBytes(value));
  }

  get completedAtTime(): BigInt {
    let value = this.get("completedAtTime");
    return value!.toBigInt();
  }

  set completedAtTime(value: BigInt) {
    this.set("completedAtTime", Value.fromBigInt(value));
  }
}
